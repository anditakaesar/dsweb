{"version":3,"sources":["../../src/logger/index.js"],"names":["VALUES","DATE_FORMAT","TIME_FORMAT","combine","format","timestamp","label","printf","myFormat","info","metas","Object","keys","forEach","e","value","undefined","push","intmsg","request","tmp","strmetas","length","join","level","toUpperCase","message","dateStr","Date","logLevel","env","NODE_ENV","includes","fileConfig","filename","consoleConfig","createNewLogger","winston","createLogger","transports","File","Console","logger"],"mappings":"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","sourcesContent":["import winston, { format } from 'winston'\r\nimport { parseISO, format as formatDate } from 'date-fns'\r\nimport env from '../env'\r\n\r\nconst VALUES = {\r\n  DATE_FORMAT: 'yyyyMMdd',\r\n  TIME_FORMAT: 'HH:mm:ss.SSS',\r\n}\r\n\r\nconst {\r\n  combine, timestamp, label, printf,\r\n} = format\r\n\r\nconst myFormat = printf((info) => {\r\n  const metas = []\r\n  Object.keys(info).forEach((e) => {\r\n    let value = ''\r\n    if (e !== 'timestamp' && e !== 'label' && e !== 'level' && e !== 'message') {\r\n      value = info[e]\r\n      if (value !== '' && value !== undefined) {\r\n        metas.push(`${e}:${value}`)\r\n      }\r\n    }\r\n  })\r\n\r\n  if (info.intmsg !== undefined) {\r\n    metas.push(info.intmsg)\r\n  }\r\n\r\n  if (info.request !== undefined) {\r\n    metas.push(`req:${info.request}`)\r\n  }\r\n\r\n  const tmp = formatDate(parseISO(info.timestamp), VALUES.TIME_FORMAT)\r\n  // metas.push(`[${info.label}]`)\r\n  let strmetas = ''\r\n  if (metas.length > 0) {\r\n    strmetas += '\\n'\r\n    strmetas += metas.join('\\n')\r\n  }\r\n\r\n  return `${tmp} ${info.level.toUpperCase()} [${info.label}] ${info.message}${strmetas}`\r\n})\r\n\r\nconst dateStr = formatDate(new Date(), VALUES.DATE_FORMAT)\r\nconst logLevel = env.NODE_ENV.includes('dev') ? 'debug' : 'info'\r\n\r\nconst fileConfig = {\r\n  filename: `logs/applog-${dateStr}.log`,\r\n  level: logLevel,\r\n  format: combine(\r\n    label({ label: env.NODE_ENV.toUpperCase() }),\r\n    timestamp(),\r\n    myFormat,\r\n  ),\r\n}\r\n\r\nconst consoleConfig = {\r\n  level: logLevel,\r\n  format: combine(\r\n    label({ label: env.NODE_ENV.toUpperCase() }),\r\n    timestamp(),\r\n    myFormat,\r\n  ),\r\n}\r\n\r\nfunction createNewLogger() {\r\n  if (env.NODE_ENV === 'production') {\r\n    return new winston.createLogger({\r\n      transports: [\r\n        new winston.transports.File(fileConfig),\r\n      ],\r\n    })\r\n  }\r\n\r\n  return new winston.createLogger({\r\n    transports: [\r\n      new winston.transports.Console(consoleConfig),\r\n      new winston.transports.File(fileConfig),\r\n    ],\r\n  })\r\n}\r\n\r\nconst logger = createNewLogger()\r\n\r\nexport default logger"],"file":"index.js"}