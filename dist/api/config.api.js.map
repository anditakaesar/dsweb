{"version":3,"sources":["../../src/api/config.api.js"],"names":["configRouter","Config","db","FormatConfig","cfg","newConfig","id","configkey","configvalue","post","req","res","process","nextTick","create","body","then","json","message","messageType","data","err","findOne","where","params","update","get","findAndCountAll","results","rows","forEach","i","push","count","result","config","errmsg","destroy"],"mappings":"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","sourcesContent":["import { Router } from 'express'\r\nimport db from '../helper/db'\r\nimport helper from '../helper'\r\n\r\nconst configRouter = Router()\r\nconst { Config } = db\r\n\r\nfunction FormatConfig(cfg) {\r\n  let newConfig = {}\r\n  newConfig.id = cfg.id\r\n  newConfig.configkey = cfg.configkey\r\n  newConfig.configvalue = cfg.configvalue\r\n  return newConfig\r\n}\r\n\r\nconfigRouter.post('/', (req, res) => {\r\n  process.nextTick(() => {\r\n    Config.create({\r\n      configkey: req.body.configkey,\r\n      configvalue: req.body.configvalue,\r\n    })\r\n    .then((cfg) => {\r\n      res.json({\r\n        message: 'save success',\r\n        messageType: 'primary',\r\n        data: cfg,\r\n      })\r\n    })\r\n    .catch((err) => {\r\n      res.json({\r\n        message: `error: ${err.message}`,\r\n        messageType: 'danger'\r\n      })\r\n    })\r\n  })\r\n})\r\n\r\nconfigRouter.post('/:id', (req, res) => {\r\n  process.nextTick(() => {\r\n    Config.findOne({\r\n      where: { id: req.params.id },\r\n    })\r\n    .then((cfg) => {\r\n      cfg.update({\r\n        configkey: req.body.configkey,\r\n        configvalue: req.body.configvalue,\r\n      })\r\n      res.json({\r\n        message: 'update success',\r\n        messageType: 'success',\r\n        data: cfg,\r\n      })\r\n    })\r\n    .catch((err) => {\r\n      res.json({\r\n        message: `error: ${err.message}`,\r\n        messageType: 'danger'\r\n      })\r\n    })\r\n  })\r\n})\r\n\r\nconfigRouter.get('/all', (req, res) => {\r\n  process.nextTick(() => {\r\n    Config.findAndCountAll()\r\n    .then((results) => {\r\n      let data = []\r\n      results.rows.forEach((cfg, i) => {\r\n        data.push(FormatConfig(cfg))\r\n      })\r\n      res.json({\r\n        message: 'all config loaded',\r\n        messageType: 'primary',\r\n        data,\r\n        count: results.count,\r\n      })\r\n    })\r\n    .catch((err) => {\r\n      res.json({\r\n        message: `error: ${err.message}`,\r\n        messageType: 'danger'\r\n      })\r\n    })\r\n  })\r\n})\r\n\r\nconfigRouter.get('/:id', (req, res) => {\r\n  process.nextTick(() => {\r\n    Config.findOne({\r\n      where: { id: req.params.id },\r\n    })\r\n    .then((result) => {\r\n      res.json({\r\n        message: 'config loaded',\r\n        config: FormatConfig(result),\r\n      })\r\n    })\r\n    .catch((err) => {\r\n      res.json({\r\n        message: 'error',\r\n        errmsg: err.message,\r\n      })\r\n    })\r\n  })\r\n})\r\n\r\nconfigRouter.delete('/:id', (req, res) => {\r\n  process.nextTick(() => {\r\n    Config.destroy({\r\n      where: { id: req.params.id },\r\n    })\r\n    .then((result) => {\r\n      res.json({\r\n        message: 'config deleted',\r\n        messageType: 'danger',\r\n        config: FormatConfig(result),\r\n      })\r\n    })\r\n    .catch((err) => {\r\n      res.json({\r\n        message: 'error',\r\n        errmsg: err.message,\r\n      })\r\n    })\r\n  })\r\n})\r\n\r\nexport default configRouter"],"file":"config.api.js"}