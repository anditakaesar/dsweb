{"version":3,"sources":["../../src/api/user.js"],"names":["userRouter","User","db","FormatUser","user","newUser","id","role","username","get","req","res","process","nextTick","findAndCountAll","where","ROLES","STAFF","then","results","data","rows","forEach","i","push","json","message","count","err","errmsg","findOne","params","result","post","console","log","body","password","passwordConfirm","Error","hasPass","bcrypt","hashSync","helper","env","SALT_HASH","update","request"],"mappings":"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","sourcesContent":["import { Router } from 'express'\r\nimport db from '../helper/db'\r\nimport helper from '../helper'\r\nimport { ROLES } from '../helper/constants/roles'\r\nimport bcrypt from 'bcrypt'\r\n\r\nconst userRouter = Router()\r\nconst { User } = db\r\n\r\nfunction FormatUser(user) {\r\n  let newUser = {}\r\n  newUser.id = user.id\r\n  newUser.role = user.role\r\n  newUser.username = user.username\r\n  return newUser\r\n}\r\n\r\nuserRouter.get('/all', (req, res) => {\r\n  process.nextTick(() => {\r\n    User.findAndCountAll({\r\n      where: { role: ROLES.STAFF },\r\n    })\r\n    .then((results) => {\r\n      let data = []\r\n      results.rows.forEach((user, i) => {\r\n        data.push(FormatUser(user))\r\n      })\r\n      res.json({\r\n        message: 'all users loaded',\r\n        data,\r\n        count: results.count,\r\n      })\r\n    })\r\n    .catch((err) => {\r\n      res.json({\r\n        message: 'error',\r\n        errmsg: err.message,\r\n      })\r\n    })\r\n  })\r\n})\r\n\r\nuserRouter.get('/:id', (req, res) => {\r\n  process.nextTick(() => {\r\n    User.findOne({\r\n      where: { id: req.params.id },\r\n    })\r\n    .then((result) => {\r\n      res.json({\r\n        message: 'user loaded',\r\n        user: FormatUser(result),\r\n      })\r\n    })\r\n    .catch((err) => {\r\n      res.json({\r\n        message: 'error',\r\n        errmsg: err.message,\r\n      })\r\n    })\r\n  })\r\n})\r\n\r\nuserRouter.post('/:id', (req, res) => {\r\n  process.nextTick(() => {\r\n    User.findOne({\r\n      where: { id: req.params.id },\r\n    })\r\n    .then((user) => {\r\n      console.log(req.body)\r\n      // update\r\n      if (req.body.password != req.body.passwordConfirm) {\r\n        throw new Error('Password and Confirm Password must be same!');\r\n      }\r\n      if (user) {\r\n        let hasPass = bcrypt.hashSync(req.body.password, helper.env.SALT_HASH)\r\n        user.update({\r\n          username: req.body.username,\r\n          password: hasPass,\r\n        })\r\n      }\r\n      res.json({\r\n        message: 'POST INVOKED',\r\n        user,\r\n        request: req.body\r\n      })\r\n    })\r\n    .catch((err) => {\r\n      res.json({\r\n        message: 'error',\r\n        errmsg: err.message,\r\n      })\r\n    })\r\n  })\r\n})\r\n\r\nexport default userRouter"],"file":"user.js"}