{"version":3,"sources":["../../src/api/entry.api.js"],"names":["entryRouter","Entry","db","post","req","res","process","nextTick","newEntry","body","userId","session","user","id","empty","create","then","ent","json","message","messageType","data","err","get","findAndCountAll","results","entries","rows","forEach","entry","i","push","count","errmsg","draw","parseInt","offset","start","limit","length","xOc","order","column","xOcName","columns","xOd","dir","where","Object","keys","query","Op","or","helper","funct","validValue","no","numPrefix","like","name","qName","toLowerCase","Sequelize","fn","col","from","travelDate","gte","to","pop","and","lte","v","recordsTotal","recordsFiltered","editedEntry","findByPk","params","update","numCombined","destroy","result"],"mappings":"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","sourcesContent":["import { Router } from 'express'\r\nimport db from '../helper/db'\r\nimport helper from '../helper'\r\nimport { Op, Sequelize } from 'sequelize'\r\nimport FormatEntry from '../helper/entry'\r\n\r\nconst entryRouter = Router()\r\nconst { Entry } = db\r\n\r\nentryRouter.post('/', (req, res) => {\r\n  process.nextTick(() => {\r\n    let newEntry = FormatEntry(req.body)\r\n    newEntry.userId = req.session.user.id\r\n    delete newEntry.id\r\n    delete newEntry.empty\r\n\r\n    Entry.create(newEntry)\r\n      .then((ent) => {\r\n        res.json({\r\n          message: 'save success',\r\n          messageType: 'success',\r\n          data: FormatEntry(ent)\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        res.json({\r\n          message: `error: ${err.message}`,\r\n          messageType: 'danger'\r\n        })\r\n      })\r\n\r\n  })\r\n})\r\n\r\nentryRouter.get('/all', (req, res) => {\r\n  process.nextTick(() => {\r\n    Entry.findAndCountAll()\r\n      .then((results) => {\r\n        let entries = []\r\n        results.rows.forEach((entry, i) => {\r\n          entries.push(FormatEntry(entry))\r\n        })\r\n        res.json({\r\n          message: 'all entries loaded',\r\n          entries,\r\n          count: results.count,\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        res.json({\r\n          message: 'error',\r\n          errmsg: err.message,\r\n        })\r\n      })\r\n  })\r\n})\r\n\r\nentryRouter.post('/dt', (req, res) => {\r\n  process.nextTick(() => {\r\n    let draw = parseInt(req.body.draw, 10)\r\n    let offset = parseInt(req.body.start, 10)\r\n    let limit = parseInt(req.body.length, 10)\r\n    let xOc = parseInt(req.body.order[0].column, 10)\r\n    let xOcName = req.body.columns[xOc].data\r\n    let xOd = req.body.order[0].dir\r\n    let order = [[xOcName, xOd]]\r\n    let results = []\r\n    let where = {}\r\n    if (Object.keys(req.query).length != 0) {\r\n      // { no: '001', name: 'andita', from: '2021-07-23', to: '2021-07-24' }\r\n      where[Op.or] = []\r\n      if (helper.funct.validValue(req.query.no)) {\r\n        where[Op.or].push({\r\n          numPrefix: {\r\n            [Op.like]: `%${req.query.no}%`\r\n          }\r\n        })\r\n      }\r\n\r\n      if (helper.funct.validValue(req.query.name)) {\r\n        let qName = req.query.name.toLowerCase();\r\n        where[Op.or].push(\r\n          Sequelize.where(\r\n            Sequelize.fn('lower', Sequelize.col('granteeName')), { [Op.like]: `%${qName}%` }\r\n          )\r\n        )\r\n      }\r\n\r\n      if (helper.funct.validValue(req.query.from)) {\r\n        where[Op.or].push(\r\n          {\r\n            travelDate: {\r\n              [Op.gte]: req.query.from\r\n            }\r\n          }\r\n        )\r\n\r\n        if (helper.funct.validValue(req.query.to)) {\r\n          where[Op.or].pop()\r\n          where[Op.or].push(\r\n            {\r\n              travelDate: {\r\n                [Op.and]: [\r\n                  { [Op.gte]: req.query.from },\r\n                  { [Op.lte]: req.query.to }\r\n                ]\r\n              }\r\n            }\r\n          )\r\n        }\r\n\r\n      } else if (helper.funct.validValue(req.query.to)) {\r\n        where[Op.or].push(\r\n          {\r\n            travelDate: {\r\n              [Op.lte]: req.query.to\r\n            }\r\n          }\r\n        )\r\n      }\r\n\r\n    }\r\n\r\n    Entry.findAndCountAll(\r\n      {\r\n        where,\r\n        offset,\r\n        limit,\r\n        order,\r\n      }\r\n    )\r\n      .then((data) => {\r\n        data.rows.forEach((v, i) => {\r\n          results.push(FormatEntry(v))\r\n        })\r\n        // console.log('ENTRY', results)\r\n        res.json({\r\n          draw,\r\n          recordsTotal: data.count,\r\n          recordsFiltered: data.count,\r\n          data: results\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        res.json({\r\n          message: 'error',\r\n          errmsg: err.message,\r\n        })\r\n      })\r\n  })\r\n})\r\n\r\nentryRouter.post('/:id', (req, res) => {\r\n  process.nextTick(() => {\r\n    let editedEntry = FormatEntry(req.body)\r\n    editedEntry.userId = req.session.user.id\r\n    delete editedEntry.id\r\n    delete editedEntry.empty\r\n\r\n    Entry.findByPk(req.params.id)\r\n      .then((entry) => {\r\n        entry.update(editedEntry)\r\n        res.json({\r\n          message: `Entry ${editedEntry.numCombined} updated`,\r\n          messageType: 'success',\r\n          data: editedEntry\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        res.json({\r\n          message: 'error',\r\n          errmsg: err.message,\r\n        })\r\n      })\r\n  })\r\n})\r\n\r\nentryRouter.get('/:id', (req, res) => {\r\n  process.nextTick(() => {\r\n    Entry.findByPk(req.params.id)\r\n      .then((entry) => {\r\n        let data = FormatEntry(entry)\r\n        res.json({\r\n          message: 'entry loaded',\r\n          messageType: 'primary',\r\n          data,\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        res.json({\r\n          message: 'error',\r\n          errmsg: err.message,\r\n        })\r\n      })\r\n  })\r\n})\r\n\r\nentryRouter.delete('/:id', (req, res) => {\r\n  process.nextTick(() => {\r\n    Entry.destroy({\r\n      where: {\r\n        id: req.params.id\r\n      }\r\n    })\r\n      .then((result) => {\r\n        res.json({\r\n          message: `entry with id ${req.params.id} deleted!`,\r\n          messageType: 'danger',\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        res.json({\r\n          message: 'error',\r\n          errmsg: err.message,\r\n        })\r\n      })\r\n  })\r\n})\r\n\r\nexport default entryRouter"],"file":"entry.api.js"}