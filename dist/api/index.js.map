{"version":3,"sources":["../../src/api/index.js"],"names":["api","use","userRouter","configRouter","entryRouter","get","req","res","status","json","message","helper","logger","info","value","Math","random","query","s","undefined","bcrypt","hash","env","SALT_HASH","then","err"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,GAAG,GAAG,sBAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQ,OAAR,EAAiBC,gBAAjB;AACAF,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBE,kBAAnB;AACAH,GAAG,CAACC,GAAJ,CAAQ,QAAR,EAAkBG,iBAAlB;AAEAJ,GAAG,CAACK,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,IAAAA,OAAO,EAAE;AADU,GAArB;AAGD,CAJD;AAMAV,GAAG,CAACK,GAAJ,CAAQ,MAAR,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5BI,qBAAOC,MAAP,CAAcC,IAAd,CAAmB,iBAAnB;;AACAN,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,IAAAA,OAAO,EAAE,cADU;AAEnBI,IAAAA,KAAK,EAAEC,IAAI,CAACC,MAAL;AAFY,GAArB;AAID,CAND;AAQAhB,GAAG,CAACK,GAAJ,CAAQ,UAAR,EAAoB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChC,MAAID,GAAG,CAACW,KAAJ,CAAUC,CAAV,KAAgBC,SAApB,EAA+B;AAC7BC,uBAAOC,IAAP,CAAYf,GAAG,CAACW,KAAJ,CAAUC,CAAtB,EAAyBP,mBAAOW,GAAP,CAAWC,SAApC,EACCC,IADD,CACM,UAACH,IAAD,EAAU;AACdd,MAAAA,GAAG,CAACE,IAAJ,CAAS;AACPC,QAAAA,OAAO,EAAE,MADF;AAEPW,QAAAA,IAAI,EAAEA;AAFC,OAAT;AAID,KAND,WAOO,UAACI,GAAD,EAAS;AACdlB,MAAAA,GAAG,CAACE,IAAJ,CAAS;AACPC,QAAAA,OAAO,EAAE,OADF;AAEPe,QAAAA,GAAG,EAAEA,GAAG,CAACf;AAFF,OAAT;AAID,KAZD;AAaD,GAdD,MAcO;AACLH,IAAAA,GAAG,CAACE,IAAJ,CAAS;AACPC,MAAAA,OAAO,EAAE;AADF,KAAT;AAGD;AACF,CApBD;eAsBeV,G","sourcesContent":["import { Router } from 'express'\r\nimport helper from '../helper'\r\nimport bcrypt from 'bcrypt'\r\nimport userRouter from './user'\r\nimport configRouter from './config.api'\r\nimport entryRouter from './entry.api'\r\n\r\nconst api = Router()\r\n\r\napi.use('/user', userRouter)\r\napi.use('/config', configRouter)\r\napi.use('/entry', entryRouter)\r\n\r\napi.get('/', (req, res) => {\r\n  res.status(200).json({\r\n    message: 'api connect'\r\n  })\r\n})\r\n\r\napi.get('/log', (req, res) => {\r\n  helper.logger.info('invoked logging')\r\n  res.status(200).json({\r\n    message: 'invoking log',\r\n    value: Math.random()\r\n  })\r\n})\r\n\r\napi.get('/passgen', (req, res) => {\r\n  if (req.query.s !== undefined) {\r\n    bcrypt.hash(req.query.s, helper.env.SALT_HASH)\r\n    .then((hash) => {\r\n      res.json({\r\n        message: 'done',\r\n        hash: hash\r\n      })\r\n    })\r\n    .catch((err) => {\r\n      res.json({\r\n        message: 'error',\r\n        err: err.message\r\n      })\r\n    })\r\n  } else {\r\n    res.json({\r\n      message: 'param required'\r\n    })\r\n  }\r\n})\r\n\r\nexport default api"],"file":"index.js"}