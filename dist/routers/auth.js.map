{"version":3,"sources":["../../src/routers/auth.js"],"names":["User","db","messages","LOGIN","WRONGUSERPASS","FILL","LOGOUT","routerAuth","fieldCheck","req","res","next","body","username","password","data","message_type","ALERT","WARNING","render","message","loginRoute","session","user","undefined","redirect","get","post","process","nextTick","findOne","where","then","authenticated","role","DANGER","err","error","destroy"],"mappings":"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","sourcesContent":["import { Router } from 'express'\r\nimport logger from '../logger'\r\nimport db from '../helper/db'\r\nimport { ALERT } from '../helper/css/alert'\r\nimport { validatePassword } from '../helper/sessionHelper'\r\n\r\nconst { User } = db\r\n\r\nconst messages = {\r\n  LOGIN: 'Please login',\r\n  WRONGUSERPASS: 'User not found or wrong password',\r\n  FILL: 'Please fill the username and password',\r\n  LOGOUT: 'You have been logged out',\r\n}\r\n\r\nconst routerAuth = Router()\r\n\r\nconst fieldCheck = (req, res, next) => {\r\n  if (!req.body.username || !req.body.password) {\r\n    res.data.message_type = ALERT.WARNING\r\n    res.render('login', {\r\n      data: {\r\n        ...res.data,\r\n        message: messages.FILL\r\n      }\r\n    })\r\n  } else {\r\n    next()\r\n  }\r\n}\r\n\r\nexport const loginRoute = (req, res, next) => {\r\n  if (req.session.user === undefined) {\r\n    res.data.message_type = ALERT.WARNING\r\n    res.render('login', {\r\n      data: {\r\n        ...res.data,\r\n        message: messages.LOGIN\r\n      }\r\n    })\r\n  } else {\r\n    res.redirect('/admin')\r\n  }\r\n}\r\n\r\nrouterAuth.get('/login', loginRoute)\r\n\r\nrouterAuth.post('/login', fieldCheck, (req, res, next) => {\r\n  process.nextTick(() => {\r\n    User.findOne({\r\n      where: { username: req.body.username },\r\n    })\r\n      .then((user) => {\r\n        if (user) {\r\n          if (validatePassword(req.body.password, user.password)) {\r\n            req.session.user = {\r\n              authenticated: true,\r\n              username: user.username,\r\n              role: user.role,\r\n            }\r\n            res.redirect('/admin')\r\n          } else {\r\n            res.data.message_type = ALERT.DANGER\r\n            res.render('login', {\r\n              data: {\r\n                ...res.data,\r\n                message: messages.WRONGUSERPASS\r\n              }\r\n            })\r\n          }\r\n        } else {\r\n          res.data.message_type = ALERT.DANGER\r\n          res.render('login', {\r\n            data: {\r\n              ...res.data,\r\n              message: messages.WRONGUSERPASS\r\n            }\r\n          })\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        res.data.error.message = err.message\r\n        next(res.data.error)\r\n      })\r\n  })\r\n})\r\n\r\nrouterAuth.get('/logout', (req, res) => {\r\n  req.session.destroy()\r\n  res.render('logout', {\r\n    data: {\r\n      ...res.data,\r\n      message: messages.LOGOUT,\r\n    },\r\n  })\r\n})\r\n\r\nexport default routerAuth"],"file":"auth.js"}